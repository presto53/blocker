#!/usr/bin/ruby
$LOAD_PATH << '.'

require 'json/pure'
require 'blocker_logger'
require 'blocker_process'
require 'blocker_banhammer'
require 'blocker_db'
require 'tycoon'
require 'iptables'
require 'rubygems'
require 'file/tail'
require 'posix/spawn'
require 'ipaddr'

# Config path
config = 'config.json'

# Structure of config for validate
valid_config_structure = {
    'pid' => nil,
    'log' => nil,
    'db' => [
        'server',
        'host',
        'port',
        'pid',
        'log',
        'bin',
        'timeout'
    ],
    'target' => nil,
    'rules' => nil,
    'ipv6' => nil
}

# Structure of valid target
valid_target_structure = [
    'name',
    'log',
    'rules',
    'exceptions',
    'ports',
    'protocol',
    'tries',
    'bantime',
    'blockmethod'
]

# Check that we running as root
raise 'daemon must be run from root' if Process.uid != 0

# Check that config exist
raise "no #{config} config file" if not FileTest.exist?(config)

# Read config and parse it from json
$params = JSON.parse(File.read(config))

# Check for pid section
raise "no pid section in #{config} file" if not $params.key?('pid')

# Check for log section
raise "no log section in #{config} file" if not $params.key?('log')

# Init threads array
$threads = []

# Create new logger object
$log = Blocker_logger.new($params['log'])

# Daemonize
pid = fork do
  if RUBY_VERSION < '1.9'
    exit if fork
    Process.setsid
    exit if fork
    Dir.chdir '/'
    STDIN.reopen '/dev/null'
    STDOUT.reopen '/dev/null', 'a'
    STDERR.reopen '/dev/null', 'a'
  else
    Process.daemon
  end

  # Initialize process object
  $blocker = Blocker_process.new($params['pid'])

  # Intercept TERM signal for shutdown
  Signal.trap('TERM') do
    $blocker.shutdown
  end

  # Error exit func
  def error_exit(error)
    $log.error "#{error}"
    $blocker.shutdown
  end

  $log.append "Starting blocker daemon. Pid #{$$}"
  $log.pid = $$
  
  # Check ipv6 support
  if $params['ipv6'] == 'yes'
    error_exit 'Sorry, your system has no ipv6 support. Please, change ipv6 option in config file.' if not File.exist?('/proc/net/if_inet6')
  elsif $params['ipv6'] != 'no'
    error_exit 'Wrong value in option ipv6. Must be yes or no.'
  end

  # Validate config structure
  valid_config_structure.each_key do |config_section|
    error_exit "Invalid or missed config option: #{config_section} section" if not $params.key?(config_section)
    if valid_config_structure[config_section].kind_of?(Array) or valid_config_structure[config_section].kind_of?(Hash)
      valid_config_structure[config_section].each do |config_option|
        error_exit "Invalid or missed config option: #{config_option}" if not $params[config_section].key?(config_option)
      end
    end
  end
  $log.append "#{config} structure validated."

  # Loading IP exceptions
  $ip_exceptions = {}
  $log.append 'Loading IP address exceptions...'
  $params['exceptions'].each_key do |exception_group|
    $ip_exceptions[exception_group] = []
    $params['exceptions'][exception_group].each do |exception|
      if (IPAddr.new(exception.to_s) rescue nil).nil?
        error_exit "Failed while loading exceptions. Check that #{exception.to_s} is valid IPv4 or IPv6 address."
      else
        $ip_exceptions[exception_group] << IPAddr.new(exception.to_s)
        $log.append "ip: #{exception.to_s} to group: #{exception_group}"
      end
    end
  end

  # Check that host options has valid ip addr and port
  if (IPAddr.new($params['db']['host']) rescue nil).nil?
    error_exit "Failed to set db host. Check that host #{$params['db']['host']} is valid IPv4 or IPv6 address."
  else
    $db_server = $params['db']['host']
    $log.append "DB host: #{$db_server}"
    if (1024..65535) === $params['db']['port']
      $db_port = $params['db']['port']
      $log.append "DB port: #{$db_port}"
    else
      error_exit 'Failed to set db port. Port must be between 1024 and 65535.'
    end
  end

  # Start storage db if server = yes
  if $params['db']['server'] == 'yes'
    $db = Blocker_DB.new($params['db'], $blocker)
  elsif not $params['db']['server'] == 'no'
    error_exit 'Invalid server option in db section.'
  end

  # Check db connection
  success = false
  $params['db']['timeout'].times do
    $log.append 'Trying connect to db server...'
    $tycoon = Tycoon.new($params['db']['host'], $params['db']['port']) rescue nil
    if $tycoon.nil?
      success = false
    else
      success = true
      break
    end
    break if success == true
    sleep 1
  end
  error_exit "Could not connect to db server #{$params['db']['host']}:#{$params['db']['port']}." if success == false

  # Validate target structure
  $log.append 'Start validating targets...'
  valid_target_structure.each do |target_option|
    $params['target'].each do |target|
      error_exit "Invalid or missed target option #{target_option} in one of targets." if not target.key?(target_option)
    end
  end
  $log.append 'Targets structure validated.'

  # Start targets viewing
  $params['target'].each do |target|
    if FileTest.exist?(target['log'])
      # Create banhammer object
      banhammer = Blocker_banhammer.new(target)
      # Create iptables objects
      if target['name'].match('[a-zA-Z]{1,}')
	if target['name'].upcase == 'INPUT' or target['name'].upcase == 'OUTPUT' or target['name'].upcase == 'FORWARD'
	  error_exit 'Target name must not be INPUT or OUTPUT or FORWARD.'
	end
      else
        error_exit 'Target name must contain only alphanumeric characters.'
      end
      error_exit 'Supported protocols now only tcp and udp.' if not target['protocol'] == 'tcp' or target['protocol'] == 'udp'
      target['ports'].each do |port|
	error_exit 'Port must be num between 0 and 65535' if not port.kind_of?(Fixnum) or port === (0..65535)
      end
      if target['blockmethod'] == 'iptables'
        $iptables = Iptables.new
	$threads << $iptables.thread
	$iptables.add_chain(target['name'], target['protocol'], target['ports'])
	if $params['ipv6'] == 'yes'
	  $ip6tables = Ip6tables.new
	  $threads << $ip6tables.thread
	  $ip6tables.add_chain(target['name'], target['protocol'], target['ports'])
	end 
      end
      # Loading rules for target
      rules = []
      target['rules'].each do |rule|
        $params['rules'][rule].each { |r| rules << r }
      end
      target['rules'] = rules
      # Start new worker thread for target monitoring
      $threads << Thread.new do
        File.open(target['log']) do |logfile|
          logfile.extend(File::Tail)
          logfile.interval = 1
          logfile.backward(1)
          logfile.tail do |line|
            # Check line for matching 
            target['rules'].each do |rule|
              if line.match(rule)
                ip_matched = []
                words = line.split
                words.each do |word| 
		  ip_matched << word if !(IPAddr.new(word) rescue nil).nil? and !word.match('^[0-9]{1,}$') 
		end
                if ip_matched.size == 1
                  ip = ip_matched.join
                  if banhammer.ip_exception?(ip)
                    $log.append "IP #{ip} hit by the rule ***#{rule}***! But it is in exception list."
                  else
                    $log.append "IP #{ip} hit by the rule ***#{rule}***!"
                    banhammer.ban(ip)
                  end
                else
                  $log.warning "#{ip_matched.size} IP addresses matched. Skip."
                end
              end
            end
          end
        end
      end
    else
      $log.error "Cannot open file #{target['log']} for monitoring. No such file."
    end
  end

  # Main loop

  time_counter = 0

  loop {

    # Monitor running threads
    $threads.each do |thread|
      error_exit "Thread #{thread} exit unexceptional..." if not thread.alive?
    end

    # Check every 1 min
    if time_counter % 60 == 0
      time_counter = 0
      ipv4_banned = []
      ipv6_banned = []
      # Check that chains and main rules exist
      # if they not exist create it
      $params['target'].each do |target|
	if target['blockmethod'] == 'iptables'
	  $iptables.add_chain(target['name'], target['protocol'], target['ports'])
	  # Get banned IPv4 addresses
	  ipv4_banned = $iptables.list(target['name'])
	  ipv4_banned.each do |ip|
	    # Get from tycoon, if not exist delete rule
	    $log.append "#{ip} in banned list."
	  end
	  if $params['ipv6'] == 'yes'
	    $ip6tables.add_chain(target['name'], target['protocol'], target['ports'])
	    # Get banned IPv6 addresses
	    ipv6_banned = $ip6tables.list(target['name'])
	    ipv6_banned.each do |ip|
	      # Get from tycoon, if not exist delete rule
	      $log.append "#{ip} in banned list."
	    end
	  end
	end
      end
    end

    sleep 1
    time_counter += 1
  }
end
Process.detach(pid)
