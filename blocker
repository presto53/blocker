#!/usr/bin/ruby
$LOAD_PATH << '.'

require 'json/pure'
require 'blocker_logger'
require 'blocker_process'
require 'blocker_banhammer'
require 'blocker_db'
require 'tycoon'
require 'rubygems'
require 'file/tail'
require 'posix/spawn'
require 'ipaddr'

# Config path
config = 'config.json'

# Structure of config for validate
valid_config_structure = {
    'daemon' => nil,
    'pid' => nil,
    'log' => nil,
    'db' => [
        'server',
        'host',
        'port',
        'pid',
        'log',
        'bin',
        'timeout'
    ],
    'target' => nil,
    'rules' => nil
}

# Structure of valid target
valid_target_structure = [
  'log',
  'rules',
  'exceptions',
  'bantime',
  'blockmethod'
]

# IPv4 and IPv6 regexp for matching source addresses from log
# IPv6 part from http://vernon.mauery.com/content/projects/linux/ipv6_regex
ipaddr_regexp = '((\A([0-9a-f]{1,4}:){1,1}(:[0-9a-f]{1,4}){1,6}\Z)|(\A([0-9a-f]{1,4}:){1,2}(:[0-9a-f]{1,4}){1,5}\Z)|(\A([0-9a-f]{1,4}:){1,3}(:[0-9a-f]{1,4}){1,4}\Z)|(\A([0-9a-f]{1,4}:){1,4}(:[0-9a-f]{1,4}){1,3}\Z)|(\A([0-9a-f]{1,4}:){1,5}(:[0-9a-f]{1,4}){1,2}\Z)|(\A([0-9a-f]{1,4}:){1,6}(:[0-9a-f]{1,4}){1,1}\Z)|(\A(([0-9a-f]{1,4}:){1,7}|:):\Z)|(\A:(:[0-9a-f]{1,4}){1,7}\Z)|(\A((([0-9a-f]{1,4}:){6})(25[0-5]|2[0-4]\d|[0-1]?\d?\d)(\.(25[0-5]|2[0-4]\d|[0-1]?\d?\d)){3})\Z)|(\A(([0-9a-f]{1,4}:){5}[0-9a-f]{1,4}:(25[0-5]|2[0-4]\d|[0-1]?\d?\d)(\.(25[0-5]|2[0-4]\d|[0-1]?\d?\d)){3})\Z)|(\A([0-9a-f]{1,4}:){5}:[0-9a-f]{1,4}:(25[0-5]|2[0-4]\d|[0-1]?\d?\d)(\.(25[0-5]|2[0-4]\d|[0-1]?\d?\d)){3}\Z)|(\A([0-9a-f]{1,4}:){1,1}(:[0-9a-f]{1,4}){1,4}:(25[0-5]|2[0-4]\d|[0-1]?\d?\d)(\.(25[0-5]|2[0-4]\d|[0-1]?\d?\d)){3}\Z)|(\A([0-9a-f]{1,4}:){1,2}(:[0-9a-f]{1,4}){1,3}:(25[0-5]|2[0-4]\d|[0-1]?\d?\d)(\.(25[0-5]|2[0-4]\d|[0-1]?\d?\d)){3}\Z)|(\A([0-9a-f]{1,4}:){1,3}(:[0-9a-f]{1,4}){1,2}:(25[0-5]|2[0-4]\d|[0-1]?\d?\d)(\.(25[0-5]|2[0-4]\d|[0-1]?\d?\d)){3}\Z)|(\A([0-9a-f]{1,4}:){1,4}(:[0-9a-f]{1,4}){1,1}:(25[0-5]|2[0-4]\d|[0-1]?\d?\d)(\.(25[0-5]|2[0-4]\d|[0-1]?\d?\d)){3}\Z)|(\A(([0-9a-f]{1,4}:){1,5}|:):(25[0-5]|2[0-4]\d|[0-1]?\d?\d)(\.(25[0-5]|2[0-4]\d|[0-1]?\d?\d)){3}\Z)|(\A:(:[0-9a-f]{1,4}){1,5}:(25[0-5]|2[0-4]\d|[0-1]?\d?\d)(\.(25[0-5]|2[0-4]\d|[0-1]?\d?\d)){3}\Z))|(([1-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){2}([1-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5]))'

# Check that we running as root
raise 'daemon must be run from root' if Process.uid != 0

# Check that config exist
raise "no #{config} config file" if not FileTest.exist?(config)

# Read config and parse it from json
params = JSON.parse(File.read(config))

# Check for pid section
raise "no pid section in #{config} file" if not params.key?('pid')

# Check for log section
raise "no log section in #{config} file" if not params.key?('log')

# Init threads array
$threads = []

# Create new logger object
$log = Blocker_logger.new(params['log'])

# Daemonize
pid = fork do
  if RUBY_VERSION < '1.9'
    exit if fork
    Process.setsid
    exit if fork
    Dir.chdir '/'
    STDIN.reopen '/dev/null'
    STDOUT.reopen '/dev/null', 'a'
    STDERR.reopen '/dev/null', 'a'
  else
    Process.daemon
  end

  # Initialize process object
  $blocker = Blocker_process.new(params['pid'])

  # Intercept TERM signal for shutdown
  Signal.trap('TERM') do
    $blocker.shutdown
  end

  # Error exit func
  def error_exit(error)
    $log.error "#{error}"
    $blocker.shutdown
  end

  $log.append "Starting blocker daemon. Pid #{$$}"
  
  # Validate config structure
  valid_config_structure.each_key do |config_section|
    error_exit "Invalid or missed config option: #{config_section} section" if not params.key?(config_section)
    if valid_config_structure[config_section].kind_of?(Array) or valid_config_structure[config_section].kind_of?(Hash)
      valid_config_structure[config_section].each do |config_option|
        error_exit "Invalid or missed config option: #{config_option}" if not params[config_section].key?(config_option)
      end
    end
  end
  $log.append "#{config} structure validated."
  
  # Loading IP exceptions
  $ip_exceptions = {}
  $log.append 'Loading IP address exceptions...'
  params['exceptions'].each_key do |exception_group|
    $ip_exceptions[exception_group] = []
    params['exceptions'][exception_group].each do |exception|
      if (IPAddr.new(exception.to_s) rescue nil).nil?
        error_exit "Failed while loading exceptions. Check that #{exception.to_s} is valid IPv4 or IPv6 address."
      else
        $ip_exceptions[exception_group] << IPAddr.new(exception.to_s)
        $log.append "ip: #{exception.to_s} to group: #{exception_group}"
      end
    end
  end
   
  # Check that host options has valid ip addr and port
  if (IPAddr.new(params['db']['host']) rescue nil).nil?
    error_exit "Failed to set db host. Check that host #{params['db']['host']} is valid IPv4 or IPv6 address."
  else
    $db_server = params['db']['host']
    $log.append "DB host: #{$db_server}"
    if (1024..65535) === params['db']['port']
      $db_port = params['db']['port']
      $log.append "DB port: #{$db_port}"
    else
      error_exit 'Failed to set db port. Port must be between 1024 and 65535.'
    end
  end

  # Start storage db if server = yes
  if params['db']['server'] == 'yes'
    $db = Blocker_DB.new(params['db'], $blocker)
  elsif not params['db']['server'] == 'no'
    error_exit 'Invalid server option in db section.'
  end

  # Check db connection
  params['db']['timeout'].times do
    $log.append 'Trying connect to db server...'
    $tycoon = Tycoon.new("#{params['db']['host']}", "#{params['db']['port']}") rescue nil
    if $tycoon.nil?
      success = nil
    else
      success = true
      break
    end
    break if success
    sleep 1
  end
  error_exit "Could not connect to db server #{params['db']['host']}:#{params['db']['port']}." if success.nil?

  # Validate target structure
  $log.append 'Start validating targets...'
  valid_target_structure.each do |target_option|
    params['target'].each do |target|
        error_exit "Invalid or missed target option #{target_option} in one of targets." if not target.key?(target_option)
    end
  end
  $log.append 'Targets structure validated.'

  # Start targets viewing
  params['target'].each do |target|
    if FileTest.exist?(target['log'])
      # Create banhammer object
      banhammer = Blocker_banhammer.new(target)
      # Loading rules for target
      rules = []
      target['rules'].each do |rule|
        params['rules'][rule].each { |r| rules << r }
      end
      target['rules'] = rules 
      # Start new worker thread for target monitoring
      $threads << Thread.new do
        File.open(target['log']) do |logfile|
          logfile.extend(File::Tail)
          logfile.interval = 1
          logfile.backward(1)
          logfile.tail do |line|  
            # Check line for matching 
            target['rules'].each do |rule|
              if line.match(rule)
                ip_matched = []
                words = line.split
                words.each { |word| ip_matched << word if !word.match(ipaddr_regexp).nil? }
                if ip_matched.size == 1
                  ip = ip_matched.join
                  if banhammer.ip_exception?(ip)
                    $log.append "IP #{ip} hit by the rule ***#{rule}***! But it is in exception list."
                  else
                    $log.append "IP #{ip} hit by the rule ***#{rule}***!"
                    #banhammer.ban(ip)
                  end
                else
                  $log.warning "#{ip_matched.size} IP addresses matched. Skip."
                end
              end 
            end
          end
        end
      end
    else
      $log.error "Cannot open file #{target['log']} for monitoring. No such file."
    end
  end

  # Main loop
  loop {

    # Monitor running threads
    $threads.each do |thread|
      error_exit "Thread #{thread} exit unexceptional..." if not thread.alive?
    end

    sleep 1
  }
end
Process.detach(pid)
